{"ast":null,"code":"import { compare } from \"bcrypt\";\nimport { sign } from \"jsonwebtoken\";\nimport sqlite from \"sqlite\";\nimport { secret } from \"../../../api/secret\";\nexport default async function signUp(req, res) {\n  const db = await sqlite.open(\"./mydb.sqlite\");\n\n  if (req.method === \"POST\") {\n    const person = await db.get(\"SELECT password FROM person WHERE email=?\", [req.body.email]);\n    compare(req.body.password, person.password, function (err, result) {\n      if (!err && result) {\n        const claims = {\n          sub: person.id,\n          myPersonEmail: person.email\n        };\n        const jwt = sign(claims, secret, {\n          expiresIn: \"1h\"\n        });\n        res.json({\n          authToken: jwt\n        });\n      } else {\n        res.json({\n          message: \"NOT OK\"\n        });\n      }\n    });\n  } else {\n    res.status(405).json({\n      message: \"We only support POST method\"\n    });\n  }\n}","map":{"version":3,"sources":["/Users/daniel/Documents/development/NEXTJS/nextjs-auth/src/pages/api/login.ts"],"names":["compare","sign","sqlite","secret","signUp","req","res","db","open","method","person","get","body","email","password","err","result","claims","sub","id","myPersonEmail","jwt","expiresIn","json","authToken","message","status"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AAEA,eAAe,eAAeC,MAAf,CACbC,GADa,EAEbC,GAFa,EAGb;AACA,QAAMC,EAAE,GAAG,MAAML,MAAM,CAACM,IAAP,CAAY,eAAZ,CAAjB;;AAEA,MAAIH,GAAG,CAACI,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,MAAM,GAAG,MAAMH,EAAE,CAACI,GAAH,CAAO,2CAAP,EAAoD,CACvEN,GAAG,CAACO,IAAJ,CAASC,KAD8D,CAApD,CAArB;AAGAb,IAAAA,OAAO,CAACK,GAAG,CAACO,IAAJ,CAASE,QAAV,EAAoBJ,MAAM,CAACI,QAA3B,EAAqC,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACjE,UAAI,CAACD,GAAD,IAAQC,MAAZ,EAAoB;AAClB,cAAMC,MAAM,GAAG;AAAEC,UAAAA,GAAG,EAAER,MAAM,CAACS,EAAd;AAAkBC,UAAAA,aAAa,EAAEV,MAAM,CAACG;AAAxC,SAAf;AACA,cAAMQ,GAAG,GAAGpB,IAAI,CAACgB,MAAD,EAASd,MAAT,EAAiB;AAC/BmB,UAAAA,SAAS,EAAE;AADoB,SAAjB,CAAhB;AAGAhB,QAAAA,GAAG,CAACiB,IAAJ,CAAS;AAAEC,UAAAA,SAAS,EAAEH;AAAb,SAAT;AACD,OAND,MAMO;AACLf,QAAAA,GAAG,CAACiB,IAAJ,CAAS;AAAEE,UAAAA,OAAO,EAAE;AAAX,SAAT;AACD;AACF,KAVM,CAAP;AAWD,GAfD,MAeO;AACLnB,IAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF","sourcesContent":["import { compare } from \"bcrypt\";\nimport { sign } from \"jsonwebtoken\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport sqlite from \"sqlite\";\nimport { secret } from \"../../../api/secret\";\n\nexport default async function signUp(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const db = await sqlite.open(\"./mydb.sqlite\");\n\n  if (req.method === \"POST\") {\n    const person = await db.get(\"SELECT password FROM person WHERE email=?\", [\n      req.body.email,\n    ]);\n    compare(req.body.password, person.password, function (err, result) {\n      if (!err && result) {\n        const claims = { sub: person.id, myPersonEmail: person.email };\n        const jwt = sign(claims, secret, {\n          expiresIn: \"1h\",\n        });\n        res.json({ authToken: jwt });\n      } else {\n        res.json({ message: \"NOT OK\" });\n      }\n    });\n  } else {\n    res.status(405).json({ message: \"We only support POST method\" });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}