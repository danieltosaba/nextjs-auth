{"ast":null,"code":"import { compare } from \"bcrypt\";\nimport cookie from \"cookie\";\nimport { sign } from \"jsonwebtoken\";\nimport sqlite from \"sqlite\";\nimport { secret } from \"../../../api/secret\";\nexport default async function login(req, res) {\n  const db = await sqlite.open(\"./mydb.sqlite\");\n\n  if (req.method === \"POST\") {\n    const person = await db.get(\"SELECT password FROM person WHERE email=?\", [req.body.email]);\n    compare(req.body.password, person.password, function (err, result) {\n      if (!err && result) {\n        const claims = {\n          sub: person.id,\n          myPersonEmail: person.email\n        };\n        const jwt = sign(claims, secret, {\n          expiresIn: \"1h\"\n        });\n        res.setHeader(\"Set-Cookie\", cookie.serialize(\"auth\", jwt, {\n          httpOnly: true,\n          secure: false,\n          sameSite: \"strict\",\n          maxAge: 3600,\n          path: \"/\"\n        }));\n        res.json({\n          message: 'Welcome'\n        });\n      } else {\n        res.json({\n          message: \"NOT OK\"\n        });\n      }\n    });\n  } else {\n    res.status(405).json({\n      message: \"We only support POST method\"\n    });\n  }\n}","map":{"version":3,"sources":["/Users/daniel/Documents/development/NEXTJS/nextjs-auth/src/pages/api/login.ts"],"names":["compare","cookie","sign","sqlite","secret","login","req","res","db","open","method","person","get","body","email","password","err","result","claims","sub","id","myPersonEmail","jwt","expiresIn","setHeader","serialize","httpOnly","secure","sameSite","maxAge","path","json","message","status"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AAEA,eAAe,eAAeC,KAAf,CAAqBC,GAArB,EAA0CC,GAA1C,EAAgE;AAC7E,QAAMC,EAAE,GAAG,MAAML,MAAM,CAACM,IAAP,CAAY,eAAZ,CAAjB;;AAEA,MAAIH,GAAG,CAACI,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,MAAM,GAAG,MAAMH,EAAE,CAACI,GAAH,CAAO,2CAAP,EAAoD,CACvEN,GAAG,CAACO,IAAJ,CAASC,KAD8D,CAApD,CAArB;AAGAd,IAAAA,OAAO,CAACM,GAAG,CAACO,IAAJ,CAASE,QAAV,EAAoBJ,MAAM,CAACI,QAA3B,EAAqC,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACjE,UAAI,CAACD,GAAD,IAAQC,MAAZ,EAAoB;AAClB,cAAMC,MAAM,GAAG;AAAEC,UAAAA,GAAG,EAAER,MAAM,CAACS,EAAd;AAAkBC,UAAAA,aAAa,EAAEV,MAAM,CAACG;AAAxC,SAAf;AACA,cAAMQ,GAAG,GAAGpB,IAAI,CAACgB,MAAD,EAASd,MAAT,EAAiB;AAC/BmB,UAAAA,SAAS,EAAE;AADoB,SAAjB,CAAhB;AAGAhB,QAAAA,GAAG,CAACiB,SAAJ,CACE,YADF,EAEEvB,MAAM,CAACwB,SAAP,CAAiB,MAAjB,EAAyBH,GAAzB,EAA8B;AAC5BI,UAAAA,QAAQ,EAAE,IADkB;AAE5BC,UAAAA,MAAM,OAFsB;AAG5BC,UAAAA,QAAQ,EAAE,QAHkB;AAI5BC,UAAAA,MAAM,EAAE,IAJoB;AAK5BC,UAAAA,IAAI,EAAE;AALsB,SAA9B,CAFF;AAWAvB,QAAAA,GAAG,CAACwB,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAT;AACD,OAjBD,MAiBO;AACLzB,QAAAA,GAAG,CAACwB,IAAJ,CAAS;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAT;AACD;AACF,KArBM,CAAP;AAsBD,GA1BD,MA0BO;AACLzB,IAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF","sourcesContent":["import { compare } from \"bcrypt\";\nimport cookie from \"cookie\";\nimport { sign } from \"jsonwebtoken\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport sqlite from \"sqlite\";\nimport { secret } from \"../../../api/secret\";\n\nexport default async function login(req: NextApiRequest, res: NextApiResponse) {\n  const db = await sqlite.open(\"./mydb.sqlite\");\n\n  if (req.method === \"POST\") {\n    const person = await db.get(\"SELECT password FROM person WHERE email=?\", [\n      req.body.email,\n    ]);\n    compare(req.body.password, person.password, function (err, result) {\n      if (!err && result) {\n        const claims = { sub: person.id, myPersonEmail: person.email };\n        const jwt = sign(claims, secret, {\n          expiresIn: \"1h\",\n        });\n        res.setHeader(\n          \"Set-Cookie\",\n          cookie.serialize(\"auth\", jwt, {\n            httpOnly: true,\n            secure: process.env.NODE_ENV !== \"development\",\n            sameSite: \"strict\",\n            maxAge: 3600,\n            path: \"/\",\n          })\n        );\n\n        res.json({ message: 'Welcome' });\n      } else {\n        res.json({ message: \"NOT OK\" });\n      }\n    });\n  } else {\n    res.status(405).json({ message: \"We only support POST method\" });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}