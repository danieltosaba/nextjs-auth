{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/daniel/Documents/development/NEXTJS/nextjs-auth/src/pages/people.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\nexport var __N_SSP = true;\nexport default function People(_ref) {\n  var people = _ref.people;\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 10\n    }\n  }, JSON.stringify(people));\n}\nexport function myGet(url, ctx) {\n  var _ctx$req;\n\n  var cookie, response, _ctx$res, _ctx$res2, json;\n\n  return _regeneratorRuntime.async(function myGet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          cookie = (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : _ctx$req.headers.cookie;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(url, {\n            headers: {\n              cookie: cookie\n            }\n          }));\n\n        case 3:\n          response = _context.sent;\n\n          if (!(response.status === 401 && !ctx.req)) {\n            _context.next = 7;\n            break;\n          }\n\n          Router.replace(\"/login\");\n          return _context.abrupt(\"return\", {});\n\n        case 7:\n          if (!(response.status === 401 && ctx.req)) {\n            _context.next = 11;\n            break;\n          }\n\n          (_ctx$res = ctx.res) === null || _ctx$res === void 0 ? void 0 : _ctx$res.writeHead(302, {\n            Location: \"http://localhost:3000/login\"\n          });\n          (_ctx$res2 = ctx.res) === null || _ctx$res2 === void 0 ? void 0 : _ctx$res2.end();\n          return _context.abrupt(\"return\");\n\n        case 11:\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 13:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/daniel/Documents/development/NEXTJS/nextjs-auth/src/pages/people.tsx"],"names":["fetch","Router","People","people","JSON","stringify","myGet","url","ctx","cookie","req","headers","response","status","replace","res","writeHead","Location","end","json"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,eAAe,SAASC,MAAT,OAAiC;AAAA,MAAfC,MAAe,QAAfA,MAAe;AAC9C,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,IAAI,CAACC,SAAL,CAAeF,MAAf,CAAN,CAAP;AACD;AAUD,OAAO,SAAeG,KAAf,CAAqBC,GAArB,EAAkCC,GAAlC;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,MADD,eACUD,GAAG,CAACE,GADd,6CACU,SAASC,OAAT,CAAiBF,MAD3B;AAAA;AAAA,2CAEkBT,KAAK,CAACO,GAAD,EAAM;AAChCI,YAAAA,OAAO,EAAE;AACPF,cAAAA,MAAM,EAAEA;AADD;AADuB,WAAN,CAFvB;;AAAA;AAECG,UAAAA,QAFD;;AAAA,gBAQDA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2B,CAACL,GAAG,CAACE,GAR/B;AAAA;AAAA;AAAA;;AASHT,UAAAA,MAAM,CAACa,OAAP,CAAe,QAAf;AATG,2CAUI,EAVJ;;AAAA;AAAA,gBAYDF,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BL,GAAG,CAACE,GAZ9B;AAAA;AAAA;AAAA;;AAaH,sBAAAF,GAAG,CAACO,GAAJ,sDAASC,SAAT,CAAmB,GAAnB,EAAwB;AACtBC,YAAAA,QAAQ,EAAE;AADY,WAAxB;AAGA,uBAAAT,GAAG,CAACO,GAAJ,wDAASG,GAAT;AAhBG;;AAAA;AAAA;AAAA,2CAoBcN,QAAQ,CAACO,IAAT,EApBd;;AAAA;AAoBCA,UAAAA,IApBD;AAAA,2CAqBEA,IArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { NextPageContext } from \"next\";\nimport Router from \"next/router\";\n\nexport default function People({ people }: any) {\n  return <div>{JSON.stringify(people)}</div>;\n}\n\nexport async function getServerSideProps(ctx: NextPageContext) {\n  const people = await myGet(\"http://localhost:3000/api/people\", ctx);\n  \n  return {\n    props: { people }, // will be passed to the page component as props\n  };\n}\n\nexport async function myGet(url: string, ctx: NextPageContext) {\n  const cookie = ctx.req?.headers.cookie;\n  const response = await fetch(url, {\n    headers: {\n      cookie: cookie!,\n    },\n  });\n\n  if (response.status === 401 && !ctx.req) {\n    Router.replace(\"/login\");\n    return {};\n  }\n  if (response.status === 401 && ctx.req) {\n    ctx.res?.writeHead(302, {\n      Location: \"http://localhost:3000/login\",\n    });\n    ctx.res?.end();\n    return;\n  }\n\n  const json = await response.json();\n  return json;\n}"]},"metadata":{},"sourceType":"module"}